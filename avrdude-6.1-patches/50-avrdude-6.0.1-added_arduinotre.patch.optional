diff --git Makefile.am Makefile.am
index 311e978..bc5e8d4 100644
--- Makefile.am
+++ Makefile.am
@@ -89,6 +89,8 @@ libavrdude_a_SOURCES = \
 	lexer.l \
 	arduino.h \
 	arduino.c \
+	arduinotre.c \
+	arduinotre.h \
 	avr.c \
 	avr.h \
 	avr910.c \
diff --git Makefile.in Makefile.in
index ab89ce2..f4183c4 100644
--- Makefile.in
+++ Makefile.in
@@ -492,6 +492,8 @@ libavrdude_a_SOURCES = \
 	lexer.l \
 	arduino.h \
 	arduino.c \
+	arduinotre.h \
+	arduinotre.c \
 	avr.c \
 	avr.h \
 	avr910.c \
diff --git ac_cfg.h.in ac_cfg.h.in
index 8183bd2..69d7058 100644
--- ac_cfg.h.in
+++ ac_cfg.h.in
@@ -1,5 +1,8 @@
 /* ac_cfg.h.in.  Generated from configure.ac by autoheader.  */
 
+/* Arduino TRE support enabled */
+#undef HAVE_ARDUINOTRE
+
 /* Define to 1 if you have the <ddk/hidsdi.h> header file. */
 #undef HAVE_DDK_HIDSDI_H
 
diff --git arduinotre.c arduinotre.c
new file mode 100644
index 0000000..e27ab45
--- /dev/null
+++ arduinotre.c
@@ -0,0 +1,424 @@
+/*
+ * avrdude - A Downloader/Uploader for AVR device programmers
+ * Copyright (C) 2013 Radoslav Kolev <radoslav@kolev.info>
+ *
+ * Support for Arduino(TM) TRE bitbanging using GPIO registers
+ * Copyright (C) 2014 Arduino LLC <support@arduino.cc>
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 2 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
+ */
+
+#include "ac_cfg.h"
+
+#include <stdio.h>
+#include <stdlib.h>
+#include <string.h>
+#include <fcntl.h>
+#include <unistd.h>
+#include <errno.h>
+#include <stdint.h>
+#include <sys/mman.h>
+
+#include "avrdude.h"
+#include "avr.h"
+#include "pindefs.h"
+#include "pgm.h"
+#include "bitbang.h"
+
+#if HAVE_ARDUINOTRE
+
+/*
+ * Contains source code excerpts from:
+ *    https://github.com/chiragnagpal/beaglebone_mmap (http://chiragnagpal.com/examples.html)
+ *    http://elinux.org/images/a/aa/Devmem2.c
+ */
+
+/*
+ * GPIO user space helpers
+ *
+ * Copyright 2009 Analog Devices Inc.
+ * Michael Hennerich (hennerich@blackfin.uclinux.org)
+ *
+ * Licensed under the GPL-2 or later
+ */
+
+/*
+ * GPIO user space helpers
+ * The following functions are acting on an "unsigned gpio" argument, which corresponds to the 
+ * gpio numbering scheme in the kernel (starting from 0).  
+ * The higher level functions use "int pin" to specify the pins with an offset of 1:
+ * gpio = pin - 1;
+ */
+
+#define GPIO_DIR_IN	0
+#define GPIO_DIR_OUT	1
+
+#define ARDUINOTRE_GPIO1_REGS_BASE 0x4804C000
+#define ARDUINOTRE_GPIO1_REGS_END  0x4804DFFF
+#define ARDUINOTRE_GPIO1_REGS_SIZE ARDUINOTRE_GPIO1_REGS_END - ARDUINOTRE_GPIO1_REGS_BASE + 0x00000001
+
+#define ARDUINOTRE_GPIO_DATAIN_OFF       0x00000138
+#define ARDUINOTRE_GPIO_CLEARDATAOUT_OFF 0x00000190
+#define ARDUINOTRE_GPIO_SETDATAOUT_OFF   0x00000194
+
+// MISO pin on GPIO1_29
+// MOSI pin on GPIO1_16
+// SCK pin on GPIO1_17
+#define ARDUINOTRE_MISO_PIN_MASK 0x20000000
+#define ARDUINOTRE_MOSI_PIN_MASK 0x00010000
+#define ARDUINOTRE_SCK_PIN_MASK  0x00020000
+
+volatile void *gpio1_base_addr = NULL;
+volatile uint32_t *gpio1_datain_addr = NULL;
+volatile uint32_t *gpio1_cleardataout_addr = NULL;
+volatile uint32_t *gpio1_setdataout_addr = NULL;
+
+static int arduinotre_export(unsigned int gpio)
+{
+	int fd, len, r;
+	char buf[11];
+	
+	fd = open("/sys/class/gpio/export", O_WRONLY);
+	if (fd < 0) {
+		perror("Can't open /sys/class/gpio/export");
+		return fd;
+	}
+	
+	len = snprintf(buf, sizeof(buf), "%d", gpio);
+	r = write(fd, buf, len);
+	close(fd);
+	
+	return r;
+}
+
+static int arduinotre_unexport(unsigned int gpio)
+{
+	int fd, len, r;
+	char buf[11];
+	
+	fd = open("/sys/class/gpio/unexport", O_WRONLY);
+	if (fd < 0) {
+		perror("Can't open /sys/class/gpio/unexport");
+		return fd;
+	}
+	
+	len = snprintf(buf, sizeof(buf), "%d", gpio);
+	r = write(fd, buf, len);
+	close(fd);
+	
+	return r;
+}
+
+static int arduinotre_openfd(unsigned int gpio)
+{
+	char filepath[60];
+	
+	snprintf(filepath, sizeof(filepath), "/sys/class/gpio/gpio%d/value", gpio);
+	return (open(filepath, O_RDWR));
+}
+
+static int arduinotre_dir(unsigned int gpio, unsigned int dir)
+{
+	int fd, r;
+	char buf[60];
+	
+	snprintf(buf, sizeof(buf), "/sys/class/gpio/gpio%d/direction", gpio);
+	
+	fd = open(buf, O_WRONLY);
+	if (fd < 0) {
+		perror("Can't open gpioX/direction");
+		return fd;
+	}
+	
+	if (dir == GPIO_DIR_OUT)
+		r = write(fd, "out", 4);
+	else
+		r = write(fd, "in", 3);
+	
+	close(fd);
+	
+	return r;
+}
+
+static int arduinotre_dir_out(unsigned int gpio)
+{
+	return arduinotre_dir(gpio, GPIO_DIR_OUT);
+}
+
+static int arduinotre_dir_in(unsigned int gpio)
+{
+	return arduinotre_dir(gpio, GPIO_DIR_IN);
+}
+
+/*
+ * End of GPIO user space helpers
+ */
+
+#define N_GPIO (PIN_MAX + 1)
+
+/*
+ * an array which holds open FDs to /sys/class/gpio/gpioXX/value for all needed pins
+ */
+static int arduinotre_fds[N_GPIO] ;
+
+
+static int devmem_fd = -1;
+
+
+static int arduinotre_setpin(PROGRAMMER * pgm, int pin, int value)
+{
+	int r;
+	
+	if (pin & PIN_INVERSE)
+	{
+		value  = !value;
+		pin   &= PIN_MASK;
+	}
+	
+	if (pin == pgm->pinno[PIN_AVR_SCK])
+	{
+		if (value)
+			*gpio1_setdataout_addr = ARDUINOTRE_SCK_PIN_MASK;
+		else
+			*gpio1_cleardataout_addr = ARDUINOTRE_SCK_PIN_MASK;
+	}
+	else if (pin == pgm->pinno[PIN_AVR_MOSI])
+	{
+		if (value)
+			*gpio1_setdataout_addr = ARDUINOTRE_MOSI_PIN_MASK;
+		else
+			*gpio1_cleardataout_addr = ARDUINOTRE_MOSI_PIN_MASK;
+	}
+	else
+	{
+		if ( arduinotre_fds[pin] < 0 )
+			return -1;
+		
+		if (value)
+			r = write(arduinotre_fds[pin], "1", 1);
+		else
+			r = write(arduinotre_fds[pin], "0", 1);
+		
+		if (r!=1) return -1;
+	}
+
+	if (pgm->ispdelay > 1)
+		bitbang_delay(pgm->ispdelay);
+	
+	return 0;
+}
+
+static int arduinotre_getpin(PROGRAMMER * pgm, int pin)
+{
+	unsigned char invert=0;
+	char c;
+	
+	if (pin & PIN_INVERSE)
+	{
+		invert = 1;
+		pin   &= PIN_MASK;
+	}
+	
+	if (pin == pgm->pinno[PIN_AVR_MISO])
+	{
+		return (*gpio1_datain_addr & ARDUINOTRE_MISO_PIN_MASK) ? 1 - invert : 0 + invert;
+	}
+
+	if ( arduinotre_fds[pin] < 0 )
+		return -1;
+	
+	if (lseek(arduinotre_fds[pin], 0, SEEK_SET)<0)
+		return -1;
+	
+	if (read(arduinotre_fds[pin], &c, 1)!=1)
+		return -1;
+	
+	if (c=='0')
+		return 0+invert;
+	else if (c=='1')
+		return 1-invert;
+	else
+		return -1;
+	
+}
+
+static int arduinotre_highpulsepin(PROGRAMMER * pgm, int pin)
+{
+	
+	if ( arduinotre_fds[pin & PIN_MASK] < 0 )
+		return -1;
+	
+	arduinotre_setpin(pgm, pin, 1);
+	arduinotre_setpin(pgm, pin, 0);
+	
+	return 0;
+}
+
+
+
+static void arduinotre_display(PROGRAMMER *pgm, const char *p)
+{
+    fprintf(stderr, "%sPin assignment  : /sys/class/gpio/gpio{n}\n",p);
+    pgm_display_generic_mask(pgm, p, SHOW_AVR_PINS);
+}
+
+static void arduinotre_enable(PROGRAMMER *pgm)
+{
+	/* nothing */
+}
+
+static void arduinotre_disable(PROGRAMMER *pgm)
+{
+	/* nothing */
+}
+
+static void arduinotre_powerup(PROGRAMMER *pgm)
+{
+	/* nothing */
+}
+
+static void arduinotre_powerdown(PROGRAMMER *pgm)
+{
+	/* nothing */
+}
+
+static int arduinotre_open(PROGRAMMER *pgm, char *port)
+{
+	int r, i, pin;
+	
+	bitbang_check_prerequisites(pgm);
+	
+	
+	if ((devmem_fd = open("/dev/mem", O_RDWR | O_SYNC)) < 0)
+		return(devmem_fd);
+
+	gpio1_base_addr = mmap(0, ARDUINOTRE_GPIO1_REGS_SIZE, PROT_READ | PROT_WRITE, MAP_SHARED, devmem_fd, ARDUINOTRE_GPIO1_REGS_BASE);
+	
+	if (gpio1_base_addr == MAP_FAILED)
+	{
+		fprintf(stderr, "Can't map GPIO1 registers");
+		return -1;
+	}
+
+	gpio1_datain_addr = (uint32_t *) (gpio1_base_addr + ARDUINOTRE_GPIO_DATAIN_OFF);
+	gpio1_cleardataout_addr = (uint32_t *) (gpio1_base_addr + ARDUINOTRE_GPIO_CLEARDATAOUT_OFF);
+	gpio1_setdataout_addr = (uint32_t *) (gpio1_base_addr + ARDUINOTRE_GPIO_SETDATAOUT_OFF);
+
+
+	for (i=0; i<N_GPIO; i++)
+		arduinotre_fds[i] = -1;
+	//Avrdude assumes that if a pin number is 0 it means not used/available
+	//this causes a problem because 0 is a valid GPIO number in Linux sysfs.
+	//To avoid annoying off by one pin numbering we assume SCK, MOSI, MISO 
+	//and RESET pins are always defined in avrdude.conf, even as 0. If they're
+	//not programming will not work anyway. The drawbacks of this approach are
+	//that unwanted toggling of GPIO0 can occur and that other optional pins
+	//mostry LED status, can't be set to GPIO0. It can be fixed when a better 
+	//solution exists.
+	for (i=2; i<N_PINS; i++) {
+		if ( pgm->pinno[i] != 0 ||
+			i == PIN_AVR_RESET ||
+			i == PIN_AVR_SCK   ||
+			i == PIN_AVR_MOSI  ||
+			i == PIN_AVR_MISO ) {
+			pin = pgm->pinno[i] & PIN_MASK;
+			if ((r=arduinotre_export(pin)) < 0) {
+				fprintf(stderr, "Can't export GPIO %d, already exported/busy?: %s",
+						pin, strerror(errno));
+				return r;
+			}
+			if (i == PIN_AVR_MISO)
+				r=arduinotre_dir_in(pin);
+			else
+				r=arduinotre_dir_out(pin);
+			
+			if (r < 0)
+				return r;
+			
+			if ((arduinotre_fds[pin]=arduinotre_openfd(pin)) < 0)
+				return arduinotre_fds[pin];
+		}
+	}
+	
+	return(0);
+}
+
+static void arduinotre_close(PROGRAMMER *pgm)
+{
+	int i, reset_pin;
+	
+	reset_pin = pgm->pinno[PIN_AVR_RESET] & PIN_MASK;
+	
+	//first configure all pins as input, except RESET
+	//this should avoid possible conflicts when AVR firmware starts
+	for (i=0; i<N_GPIO; i++) {
+		if (arduinotre_fds[i] >= 0 && i != reset_pin) {
+			close(arduinotre_fds[i]);
+			arduinotre_dir_in(i);
+			arduinotre_unexport(i);
+		}
+	}
+	//configure RESET as input, if there's external pull up it will go high
+	if (arduinotre_fds[reset_pin] >= 0) {
+		close(arduinotre_fds[reset_pin]);
+		arduinotre_dir_in(reset_pin);
+		arduinotre_unexport(reset_pin);
+	}
+
+	close(devmem_fd);
+}
+
+void arduinotre_initpgm(PROGRAMMER *pgm)
+{
+	strcpy(pgm->type, "arduinotre");
+	
+	pgm_fill_old_pins(pgm); // TODO to be removed if old pin data no longer needed
+	
+	pgm->rdy_led        = bitbang_rdy_led;
+	pgm->err_led        = bitbang_err_led;
+	pgm->pgm_led        = bitbang_pgm_led;
+	pgm->vfy_led        = bitbang_vfy_led;
+	pgm->initialize     = bitbang_initialize;
+	pgm->display        = arduinotre_display;
+	pgm->enable         = arduinotre_enable;
+	pgm->disable        = arduinotre_disable;
+	pgm->powerup        = arduinotre_powerup;
+	pgm->powerdown      = arduinotre_powerdown;
+	pgm->program_enable = bitbang_program_enable;
+	pgm->chip_erase     = bitbang_chip_erase;
+	pgm->cmd            = bitbang_cmd;
+	pgm->open           = arduinotre_open;
+	pgm->close          = arduinotre_close;
+	pgm->setpin         = arduinotre_setpin;
+	pgm->getpin         = arduinotre_getpin;
+	pgm->highpulsepin   = arduinotre_highpulsepin;
+	pgm->read_byte      = avr_read_byte_default;
+	pgm->write_byte     = avr_write_byte_default;
+}
+
+const char arduinotre_desc[] = "Arduino TRE bitbanging using GPIO registers";
+
+#else  /* !HAVE_ARDUINOTRE */
+
+void arduinotre_initpgm(PROGRAMMER * pgm)
+{
+	fprintf(stderr,
+			"%s: Arduino TRE support not available in this configuration\n",
+			progname);
+}
+
+const char arduinotre_desc[] = "Arduino TRE bitbanging using GPIO registers (not available)";
+
+#endif /* HAVE_ARDUINOTRE */
diff --git arduinotre.h arduinotre.h
new file mode 100644
index 0000000..787dd0d
--- /dev/null
+++ arduinotre.h
@@ -0,0 +1,37 @@
+/*
+ * avrdude - A Downloader/Uploader for AVR device programmers
+ * Copyright (C) 2013 Radoslav Kolev <radoslav@kolev.info>
+ *
+ * Support for Arduino(TM) TRE bitbanging using GPIO registers
+ * Copyright (C) 2014 Arduino LLC <support@arduino.cc>
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 2 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
+ */
+
+#ifndef arduinotre_h
+#define arduinotre_h
+
+#ifdef __cplusplus
+extern "C" {
+#endif
+	
+	extern const char arduinotre_desc[];
+	void arduinotre_initpgm        (PROGRAMMER * pgm);
+	
+#ifdef __cplusplus
+}
+#endif
+
+#endif
diff --git avrdude.conf.in avrdude.conf.in
index 319919e..75c910b 100644
--- avrdude.conf.in
+++ avrdude.conf.in
@@ -1212,7 +1212,30 @@ programmer
 #  miso  = ?;
 #;
 
-# some ultra cheap programmers use bitbanging on the 
+#This programmer bitbangs GPIO lines using the Linux sysfs GPIO interface and direct
+#GPIO memory registers read/write.
+#
+#To enable it set the configuration below to match the GPIO lines connected to the
+#relevant ISP header pins and uncomment the entry definition. In case you don't
+#have the required permissions to edit this system wide config file put the
+#entry in a separate <your name>.conf file and use it with -C+<your name>.conf
+#on the command line.
+#
+#To check if your avrdude build has support for the arduinotre programmer compiled in,
+#use -c?type on the command line and look for arduinotre in the list. If it's not available
+#you need pass the --enable-arduinotre=yes option to configure and recompile avrdude.
+#
+#programmer
+#  id    = "arduinotre";
+#  desc  = "Arduino TRE bitbanging using GPIO registers";
+#  type  = "arduinotre";
+#  reset = ~65;
+#  sck   = 49;
+#  mosi  = 48;
+#  miso  = 61;
+#;
+
+# some ultra cheap programmers use bitbanging on the
 # serialport.
 #
 # PC - DB9 - Pins for RS232:
diff --git configure configure
index d77ba76..053a825 100755
--- configure
+++ configure
@@ -754,6 +754,7 @@ enable_versioned_doc
 enable_doc
 enable_parport
 enable_linuxgpio
+enable_arduinotre
 '
       ac_precious_vars='build_alias
 host_alias
@@ -1397,6 +1398,7 @@ Optional Features:
   --enable-parport        Enable accessing parallel ports(default)
   --enable-linuxgpio      Enable the Linux sysfs GPIO interface programmer
                           type
+  --enable-arduinotre     Enable the Arduino TRE interface programmer type
 
 Some influential environment variables:
   CC          C compiler command
@@ -5967,6 +5969,18 @@ else
 fi
 
 
+# Check whether --enable-arduinotre was given.
+if test "${enable_arduinotre+set}" = set; then :
+  enableval=$enable_arduinotre; case "${enableval}" in
+		yes) enabled_arduinotre=yes ;;
+		no)  enabled_arduinotre=no ;;
+		*)   as_fn_error $? "bad value ${enableval} for enable-arduinotre option" "$LINENO" 5 ;;
+		esac
+else
+  enabled_arduinotre=no
+fi
+
+
 DIST_SUBDIRS_AC='doc windows'
 
 if test "$enabled_doc" = "yes"; then
@@ -6058,6 +6072,16 @@ else
 fi
 
 
+if test "$enabled_arduinotre" = "yes"; then
+
+$as_echo "#define HAVE_ARDUINOTRE 1" >>confdefs.h
+
+	confsubst="$confsubst -e /^@HAVE_ARDUINOTRE_/d"
+else
+	confsubst="$confsubst -e /^@HAVE_ARDUINOTRE_BEGIN@/,/^@HAVE_ARDUINOTRE_END@/d"
+fi
+
+
 # If we are compiling with gcc, enable all warning and make warnings errors.
 if test "$GCC" = yes; then
     ENABLE_WARNINGS="-Wall"
@@ -7744,3 +7768,9 @@ else
    echo "DISABLED   linuxgpio"
 fi
 
+if test x$enabled_arduinotre = xyes; then
+   echo "ENABLED    arduinotre"
+else
+   echo "DISABLED   arduinotre"
+fi
+
diff --git configure.ac configure.ac
index 6eeb2ba..7c2883d 100644
--- configure.ac
+++ configure.ac
@@ -300,6 +300,18 @@ AC_ARG_ENABLE(
 		esac],
 	[enabled_linuxgpio=no])	
 
+AC_ARG_ENABLE(
+	[arduinotre],
+	AC_HELP_STRING(
+		[--enable-arduinotre],
+		[Enable the Arduino TRE interface programmer type]),
+	[case "${enableval}" in
+		yes) enabled_arduinotre=yes ;;
+		no)  enabled_arduinotre=no ;;
+		*)   AC_MSG_ERROR(bad value ${enableval} for enable-arduinotre option) ;;
+		esac],
+	[enabled_arduinotre=no])
+
 DIST_SUBDIRS_AC='doc windows'
 
 if test "$enabled_doc" = "yes"; then
@@ -377,6 +389,14 @@ else
 fi
 
 
+if test "$enabled_arduinotre" = "yes"; then
+	AC_DEFINE(HAVE_ARDUINOTRE, 1, [Arduino TRE support enabled])
+	confsubst="$confsubst -e /^@HAVE_ARDUINOTRE_/d"
+else
+	confsubst="$confsubst -e /^@HAVE_ARDUINOTRE_BEGIN@/,/^@HAVE_ARDUINOTRE_END@/d"
+fi
+
+
 # If we are compiling with gcc, enable all warning and make warnings errors.
 if test "$GCC" = yes; then
     ENABLE_WARNINGS="-Wall"
@@ -544,3 +564,9 @@ else
    echo "DISABLED   linuxgpio"
 fi
 
+if test x$enabled_arduinotre = xyes; then
+   echo "ENABLED    arduinotre"
+else
+   echo "DISABLED   arduinotre"
+fi
+
diff --git pgm_type.c pgm_type.c
index 7f36dfd..29b7db1 100644
--- pgm_type.c
+++ pgm_type.c
@@ -29,6 +29,7 @@
 #include "pgm_type.h"
 
 #include "arduino.h"
+#include "arduinotre.h"
 #include "avr.h"
 #include "avr910.h"
 #include "avrftdi.h"
@@ -53,6 +54,7 @@
 
 const PROGRAMMER_TYPE const programmers_types[] = {
         {"arduino", arduino_initpgm, arduino_desc},
+        {"arduinotre", arduinotre_initpgm, arduinotre_desc},
         {"avr910", avr910_initpgm, avr910_desc},
         {"avrftdi", avrftdi_initpgm, avrftdi_desc},
         {"buspirate", buspirate_initpgm, buspirate_desc},
